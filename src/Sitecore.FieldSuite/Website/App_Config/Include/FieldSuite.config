<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<commands>
			<command name="fieldsuite:edititem" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.EditItem, Sitecore.SharedSource.FieldSuite" />
			<command name="fieldsuite:openitemcomparer" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.OpenItemComparer, Sitecore.SharedSource.FieldSuite" />
			<command name="fieldsuite:imagesfield.additem" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.AddItem, Sitecore.SharedSource.FieldSuite" />
			<command name="fieldsuite:treelist.additem" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.Treelist.AddItem, Sitecore.SharedSource.FieldSuite" />
			<command name="fieldsuite:fieldGutterUpdate" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.FieldGutter, Sitecore.SharedSource.FieldSuite" />
			<command name="fieldsuite:templateIconUpdate" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Commands.TemplateIconUpdate, Sitecore.SharedSource.FieldSuite" />
		</commands>
		<controlSources>
			<!-- This allows the Edit and Add Forms to be picked up by Sitecore as registered Xaml applications -->
			<source mode="on" namespace="Sitecore.Web.UI.XmlControls" folder="/sitecore modules/shell/field suite" deep="false"/>
			<!-- From the Field Items in the core database, we can call the field types using the control field, ex: fieldsuite:MultiList-->
			<source mode="on" namespace="Sitecore.SharedSource.FieldSuite.CustomSitecore.Fields" assembly="Sitecore.SharedSource.FieldSuite" prefix="fieldsuite" />
		</controlSources>
		<pipelines>
			<publish help="Processors should derive from Sitecore.Publishing.Pipelines.Publish.PublishProcessor">
				<!-- Implemented to auto publish referenced items on root publishing node -->
				<processor patch:instead="*[@type='Sitecore.Publishing.Pipelines.Publish.AddItemsToQueue, Sitecore.Kernel']" type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Pipelines.AutoPublishReferenceItems, Sitecore.SharedSource.FieldSuite" />
			</publish>
			<renderContentEditor>
				<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client">
					<patch:delete />
				</processor>
				<processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderStandardContentEditor, Sitecore.Client">
					<patch:delete />
				</processor>
				<!-- Adding processor for custom field menu item functionality -->
				<processor type="Sitecore.SharedSource.FieldSuite.CustomSitecore.Applications.Editors.ContentEditor.RenderFieldSuiteContentEditor,Sitecore.SharedSource.FieldSuite" />
			</renderContentEditor>
		</pipelines>
		<fieldSuite>
			<!-- Enable Auto-Publishing of field values-->
			<add key="AutoPublishFieldValues" value="1"/>

			<!-- To only enable auto-publishing on certain templates, if the value attribute is left empty it will be enabled for all templates -->
			<!-- Example: value="{193C3B30-BB19-4050-8C07-35C20520489B}|{DAF085E8-602E-43A6-8299-038FF171349F}" -->
			<add key="AutoPublishFieldValues.Templates" value=""/>
			<fields>
				<fieldGutter>
					<!-- The Processor runs the gutter functionality against a field item -->
					<!-- Max Count: Number of Items to run field gutter processer against.  The lower the number, the less of a performance hit -->
					<processor type="Sitecore.SharedSource.FieldSuite.FieldGutter.FieldGutterProcessor, Sitecore.SharedSource.FieldSuite" maxcount="25"/>

					<!-- Gutter Items render html to be placed in the field gutter, they implement the IFieldGutter interface -->
					<gutterItem type="Sitecore.SharedSource.FieldSuite.FieldGutter.ItemComparerFieldGutter, Sitecore.SharedSource.FieldSuite" />
				</fieldGutter>
				<imagesField>
					<!-- Images Field: The field needs to know for each template, how to extract the title or the image -->
					<!-- Template: Pipe Delimitered set of templates -->
					<!-- Title Field: Point this to a single line text field and that will be rendered as the title.  Leave it blank and it will fall back to the Display Value of the item -->
					<!-- Image Field: Point this to your image field -->
					<!-- Create your own mapping processor by implementing the IFieldSuiteImage interface and assigning the type attribute to your class file -->

					<!-- Static Example -->
					<!--<mapping template="{193C3B30-BB19-4050-8C07-35C20520489B}" titleField="" imageField="SlideImage" type="Sitecore.SharedSource.FieldSuite.ImageMapping.FieldSuiteImage, Sitecore.SharedSource.FieldSuite"/>-->
					<!-- Dynamic Example -->
					<!--<mapping template="{DAF085E8-602E-43A6-8299-038FF171349F}" type="Sitecore.SharedSource.FieldSuite.ImageMapping.MediaImage, Sitecore.SharedSource.FieldSuite"/>-->

					<!-- Unversioned Media Item (Jpeg, Image) -->
					<mapping template="{DAF085E8-602E-43A6-8299-038FF171349F}|{F1828A2C-7E5D-4BBD-98CA-320474871548}" type="Sitecore.SharedSource.FieldSuite.ImageMapping.MediaImage, Sitecore.SharedSource.FieldSuite"/>
					<!-- Versioned Media Item (Jpeg, Image) -->
					<mapping template="{EB3FB96C-D56B-4AC9-97F8-F07B24BB9BF7}|{C97BA923-8009-4858-BDD5-D8BE5FCCECF7}" type="Sitecore.SharedSource.FieldSuite.ImageMapping.MediaImage, Sitecore.SharedSource.FieldSuite"/>
				</imagesField>
				<fieldPlaceholder>
					<!-- The Processor runs the placeholder functionality against a field item -->
					<processor type="Sitecore.SharedSource.FieldSuite.Placeholders.FieldPlaceholderProcessor, Sitecore.SharedSource.FieldSuite"/>
					
					<!-- These relate to a Field Type's Menu Buttons in the Core Database.  You can set placeholders in the Click Event field of the menu button and it will be swapped out appropiately -->
					<!-- Key: Placeholder value that will be swapped out -->
					<!-- Type: Implements the IFieldPlaceholder interface -->
					<placeholderItem key="$Target" type="Sitecore.SharedSource.FieldSuite.Placeholders.Types.FieldId, Sitecore.SharedSource.FieldSuite" />
					<placeholderItem key="$ItemId" type="Sitecore.SharedSource.FieldSuite.Placeholders.Types.ItemId, Sitecore.SharedSource.FieldSuite" />
					<placeholderItem key="$Source" type="Sitecore.SharedSource.FieldSuite.Placeholders.Types.Source, Sitecore.SharedSource.FieldSuite" />
				</fieldPlaceholder>
			</fields>
		</fieldSuite>
		<!-- Field Mapping for the Custom Item Generator -->
		<customItem>
			<FieldMappings>
				<FieldMapping fieldType="Field Suite Droplink">CustomLookupField</FieldMapping>
				<FieldMapping fieldType="Field Suite Droptree">CustomLookupField</FieldMapping>
				<FieldMapping fieldType="Field Suite Images Field">CustomMultiListField</FieldMapping>
				<FieldMapping fieldType="Field Suite Multilist">CustomMultiListField</FieldMapping>
				<FieldMapping fieldType="Field Suite Treelist">CustomMultiListField</FieldMapping>
				<FieldMapping fieldType="Field Suite TreelistEx">CustomMultiListField</FieldMapping>
			</FieldMappings>
		</customItem>
	</sitecore>
</configuration>